"gemini" need -> var gemini
"lua-dotenv" need -> var dotenv

alias: new-client #( gemini.Client.new 2 )
alias: io-read #( io.read )
alias: io-write #( io.write 1 0 )
alias: io-flush #( io.flush 0 0 )
alias: concat #( table.concat 2 )
alias: dotload ".env" #( dotenv.load_dotenv 1 )
alias: bye #( os.exit )

alias: RED    "\27[1;91m"
alias: GREEN  "\27[1;92m"
alias: CYAN   "\27[1;96m"
alias: PURPLE "\27[1;95m"
alias: RESET  "\27[0m"

var client

"Context:\n%s\nChat History:\n%s\nQuestion:\n%s\nAnswer:" -> var prompt-template

"" -> var context
[] -> var history
"" -> var question
"" -> var answer

var mood
var role
var instructions
var model

: cprint ( color s -- )
  "%s%s%s" -rot RESET #( string.format 4 ) io-write ;

: forget [] -> history ;

: dotget ( key default -- s )
  swap #( dotenv.get  1 1 )
  dup nil = if drop else nip then ;

: build-prompt
  prompt-template
  context
  history "\n" concat
  question #( string.format 4 ) ;

: add-history
  history
  " - User: " question .. "\n" ..
  " - AI: "   answer ..
  ..
  append ;

: build-sys-message
  "You are a " mood .. " " .. role .. ". " ..
  instructions ". " .. ..
  "Use the following context to answer the question. " ..
  "Your output is displayed in a terminal window, so be concise and use simple ascii characters. " ..
  "Don't use markdown or similar formatting. " .. ;

: gen-content ( s -- s )
  build-sys-message #( client:generate_content 2 ) ;

: ask-question
  build-prompt gen-content -> answer ;

: .models ( -- )
  #( client:get_model_names )
  ipairs: i name
    name . cr
  end ;

: .prompt build-prompt . cr ;
: .system build-sys-message . cr ;
: .history history "\n" concat . cr ;

: .config
  "Mood:" . mood . cr
  "Role:" . role . cr
  "Model:" . model . cr ;

: .help
  "bye - exit" . cr
  "prompt - show promt" . cr
  "system - show system instructions" . cr
  "models - list available models" . cr
  "clear - clear screen" . cr
  "config - show .env config" . cr
  "forget - clear history" . cr
  "history - show the chat history"
  "help - show this help" . cr ;

: trim ( s -- s ) "^%s*(.-)%s*$" #( string.match 2 ) ;

: read
  cr
  GREEN "% " cprint
  CYAN io-write
  io-read trim
  RESET io-write ;

: clear "\27[2J\27[H" io-write io-flush ;

: init
  dotload
  "mood"  "helpful"   dotget -> mood
  "role"  "assistant" dotget -> role
  "instr" ""          dotget -> instructions
  "model" "gemini-2.0-flash" dotget -> model
  "api_key" nil dotget
  dup nil = if
    drop
    "Error: api_key not found in .env" . cr
    bye
  else
    model new-client -> client
  then
  forget
  CYAN "I'm ready. Type 'help' for more info." cprint ;

: eval-question ( s -- )
  dup "" = if
    ( q ) drop
    "" -> answer
  else
    ( q ) -> question
    ask-question
    add-history
  then ;

: repl
  begin
    read
    case
      "bye"     of  bye     endof
      "prompt"  of .prompt  endof
      "system"  of .system  endof
      "models"  of .models  endof
      "clear"   of  clear   endof
      "config"  of .config  endof
      "help"    of .help    endof
      "forget"  of  forget  endof
      "history" of .history endof
      ( q ) eval-question
      PURPLE answer cprint
      depth 0 != if RED cr "something wrong" cprint then
    endcase
  again ;

: main
  init
  repl ;

main
